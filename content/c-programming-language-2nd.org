#+title: C Programming Language
#+property: header-args c :tangle no :mkdirp yes

#+begin_src emacs-lisp :results none
  (setq org-src-window-setup 'current-window)
#+end_src


* CHAPTER 4. Functions and Program Structure

** Basics of Functions

#+begin_src c :results none :tangle ~/code/04-01/src/grep.c
  #include <stdio.h>
  #define MAXLINE 1000


  int strindex(char source[], char searchfor[]);
  int _getline(char line[], int max);

  char pattern[] = "ould";

  int main() {
    char line[MAXLINE];
    int found = 0;
    while (_getline(line, MAXLINE) > 0) {
      if (strindex(line, pattern) >= 0) {
        printf("%s", line);
        found++;
      }
    }
    return found;
  }

  int strindex(char s[], char t[]) {
    int i, j , k;
    for (i = 0; s[i] != '\0'; i++) {
      for (j = i, k = 0; t[k] != '\0' && s[j] == t[k]; j++, k++) {
        
      }
      if (k > 0 && t[k] == '\0') {
        return i;
      }
    }
    return -1;
  }

  int _getline(char s[], int lim) {
    int c, i;
    i = 0;
    while (--lim > 0 && (c = getchar()) != EOF && c != '\n') {
      s[i++] = c;
    }
    if (c == '\n') {
      s[i++] = c;  
    }
    s[i] = '\0';
    return i;
  }


#+end_src

#+begin_src makefile :results none :tangle ~/code/04-01/Makefile
  CC = gcc
  CFLAGS = -g -Wall -Werror -I./src
  SRCS = src/grep.c
  OBJS = $(SRCS:.c=.o)
  TARGET = app

  all: $(TARGET)

  $(TARGET): $(OBJS)
  	$(CC) -o $@ $^

  %.o: %c
  	$(CC) $(CFLAGS) -c %< -o $@

  clean:
  	rm -f $(OBJS) $(TARGET)
#+end_src

** Functions Returning Non-integers

#+begin_src c :results none :tangle ~/code/04-02/src/atof.c
  #include <ctype.h>


  double atof(char s[]) {
    double val, power;
    int i, sign;
    for (i = 0; isspace(s[i]); i++) {
      /* skip white space */
    }
    sign = (s[i] == '-') ? -1 : 1;
    if (s[i] == '+' || s[i] == '-') {
      i++;
    }
    for (val = 0.0; isdigit(s[i]); i++) {
      val = 10.0 * val + (s[i] - '0');
    }
    if (s[i] == '.') {
      i++;
    }
    for (power = 1.0; isdigit(s[i]); i++) {
      val = 10.0 * val + (s[i] - '0');
      power *= 10.0;
    }
    return sign * val / power;
  }
#+end_src

#+begin_src c :results none :tangle ~/code/04-02/src/main.c
  #include <stdio.h>

  #define MAXLINE 100

  int main() {
    double sum, atof(char[]);
    char line[MAXLINE];
    int _getline(char line[], int max);

    sum = 0;
    while (_getline(line, MAXLINE) > 0) {
      printf("\t%g\n", sum += atof(line));
    }
    return 0;
  }

  int _getline(char s[], int lim) {
    int c, i;
    i = 0;
    while (--lim > 0 && (c = getchar()) != EOF && c != '\n') {
      s[i++] = c;
    }
    if (c == '\n') {
      s[i++] = c;  
    }
    s[i] = '\0';
    return i;
  }
#+end_src

#+begin_src makefile :results none :tangle ~/code/04-02/Makefile
  CC = gcc
  CFLAGS = -g -Wall -Werror -I./src
  SRCS = src/main.c src/atof.c
  OBJS = $(SRCS:.c=.o)
  TARGET = app

  all: $(TARGET)

  $(TARGET): $(OBJS)
  	$(CC) -o $@ $^

  %.o: %c
  	$(CC) $(CFLAGS) -c %< -o $@

  clean:
  	rm -f $(OBJS) $(TARGET)
#+end_src

** External Variables

#+begin_src c :results none :tangle ~/code/04-03/src/calc.h
  #define NUMBER '0'              /* signal that a number was found */
  void push(double);
  double pop(void);
  int getop(char []);
  int getch(void);
  void ungetch(int);
#+end_src

#+begin_src c :results none :tangle ~/code/04-03/src/main.c
  #include <stdio.h>
  #include <stdlib.h>             /* for atof() */
  #include "calc.h"

  #define MAXOP 100               /* max size of operand or operator */

  /* reverse Polish calculator */
  int main() {
    int type;
    double op2;
    char s[MAXOP];

    while ((type = getop(s)) != EOF) {
      switch(type) {
      case NUMBER:
        push(atof(s));
        break;
      case '+':
        push(pop() + pop());
        break;
      case '*':
        push(pop() * pop());
        break;
      case '-':
        op2 = pop();
        push(pop() - op2);
        break;
      case '/':
        op2 = pop();
        if (op2 != 0.0)
          push(pop() / op2);
        else
          printf("error: zero divisor\n");
        break;
      case '\n':
        printf("\t%.8g\n", pop());
        break;
      default:
        printf("error: unknown command %s\n", s);
        break;
      }
    }
    return 0;
  }
#+end_src

#+begin_src c :results none :tangle ~/code/04-03/src/getop.c
  #include <stdio.h>
  #include <ctype.h>
  #include "calc.h"

  /* getop: get next operator or numberic operand */
  int getop(char s[]) {
    int i, c;
    while((s[0] = c = getch()) == ' ' || c == '\t') {
      /* skip */
    }
    s[1] = '\0';
    if (!isdigit(c) && c != '.')
      return c;                   /* not a number */
    i = 0;
    if (isdigit(c))
      while (isdigit(s[++i] = c = getch())) {
        /* collect integer part */
      }
    if (c == '.')
      while (isdigit(s[++i] = c = getch())) {
        /* collect fraction part */
      }
    s[i] = '\0';
    if (c != EOF)
      ungetch(c);
    return NUMBER;
  }
#+end_src

#+begin_src c :results none :tangle ~/code/04-03/src/getch.c
  #include <stdio.h>
  #define BUFSIZE 100

  char buf[BUFSIZE];
  int bufp = 0;

  int getch(void) {
    return (bufp > 0) ? buf[--bufp] : getchar();
  }

  void ungetch(int c) {
    if (bufp >= BUFSIZE)
      printf("ungetch: too many characters\n");
    else
      buf[bufp++] = c;
  }
#+end_src

#+begin_src c :results none :tangle ~/code/04-03/src/stack.c
  #include <stdio.h>
  #include "calc.h"

  #define MAXVAL 100

  int sp = 0;
  double val[MAXVAL];

  /* push: push f onto value stack */
  void push(double f) {
    if (sp < MAXVAL)
      val[sp++] = f;
    else
      printf("error: stack full, can't push %g\n", f);
  }

  /* pop: pop and return top value from stack */
  double pop(void) {
    if (sp > 0)
      return val[--sp];
    else {
      printf("error: stack empty\n");
      return 0.0;
    }
  }
#+end_src

#+begin_src makefile :results none :tangle ~/code/04-03/Makefile
  # Compiler
  CC = gcc

  # Compiler flags
  CFLAGS = -g -Wall -Werror -I./src

  # Source files
  SRCS = src/main.c src/getop.c src/getch.c src/stack.c

  # Object files
  OBJS = $(SRCS:.c=.o)

  # Executable name
  TARGET = app

  # Default target
  all: $(TARGET)

  # Link object files to create the executable
  $(TARGET): $(OBJS)
  	$(CC) -o $@ $^

  # Compile source files to objects files
  %.o: %.c
  	$(CC) $(CFLAGS) -c $< -o $@

  # Clean target
  clean:
  	rm -f $(OBJS) $(TARGET)
#+end_src

After execute program, input and output will be like below.
#+begin_example
  IN: 1 1 +
  OUT: 2
  IN: 1 1 + 2 2 + *
  (1 + 1) * (2 + 2) in infix notation(?)
  OUT: 8
#+end_example

** Recursion

#+begin_src c :results none :tangle ~/code/04-10-01/src/printd.c
  #include <stdio.h>

  void printd(int n);

  int main() {
    printd(123);
  }

  void printd(int n) {
    if (n < 0) {
      putchar('-');
      n = -n;
    }
    if (n / 10)
      printd(n / 10);
    putchar(n % 10 + '0');
  }
#+end_src

#+begin_src c :results none :tangle ~/code/04-10-02/src/qsort.c
  #include <stdio.h>


  void qsort(int v[], int left, int right);
  void swap(int v[], int i, int j);

  int main() {
    int v[] = {3, 5, 2, 1, 6, 8, 10};
    qsort(v, 0, 6);
    for (int i = 0; i < 7; i++)
      printf("%d, ", v[i]);
    printf("\n");
  }

  /* qsort: sort v[left]..v[right] into increasing order */
  void qsort(int v[], int left, int right) {
    int i, last;
    if (left >= right)            /* do nothing if array contains fewer than two elements */
      return;
    swap(v, left, (left + right) / 2); /* move partition elem to v[0] */
    last = left;
    for (i = left + 1; i <= right; i++) /* partition */
      if (v[i] < v[left])
        swap(v, ++last, i);
    swap(v, left, last);         /* restore partition elem */
    qsort(v, left, last - 1);
    qsort(v, last + 1, right);
  }

  /* swap: interchange v[i] and v[j] */
  void swap(int v[], int i, int j) {
    int temp;
    temp = v[i];
    v[i] = v[j];
    v[j] = temp;
  }
#+end_src

* CHAPTER 5. Pointers and Arrays

** Pointers and Addresses

#+begin_src c :results none :tangle ~/code/05-01/src/pointers.c
  #include <stdio.h>


  int main() {
    int x = 1, y = 2, z[10];
    int *ip;                      /* ip is a pointer to int */
    printf("int *ip: %p\n", &ip);

    ip = &x;                      /* ip now points to x */
    printf("ip = &x: %d\n", ip);
    y = *ip;                      /* y is now 1 */
    printf("y = *ip: %d\n", y);
    ,*ip = 0;                      /* x is now 0 */
    printf("*ip = 0: %d\n", x);
    ip = &z[0];                    /* ip now points to z[0] */
    printf("ip = &z[0]: %d\n", ip);
  }
#+end_src

** Character Pointers and Functions

#+name: strcpy array subscript version
#+begin_src c
  /* strcpy: copy t to s; array subscript version */
  void strcpy(char *s, char *t) {
    int i;
    i = 0;
    while ((s[i] = t[i]) != '\0')
      i++;
  }
#+end_src

#+name: strcpy pointer version1
#+begin_src c
  /* strcpy: copy t to s; pointer version */
  void strcpy(char *s, char *t) {
    while ((*s = *t) != '\0') {
      s++;
      t++;
    }
  }
#+end_src

#+name: strcpy pointer version2
#+begin_src c
  /* strcpy: copy t to s; pointer version 2 */
  void strcpy(char *s, char *t) {
    while ((*s++ = *t++) != '\0')
      ;
  }
#+end_src

#+name: strcopy pointer version3
#+begin_src c
  void strcpy(char *s, char *t) {
    while (*s++ = *t++)
      ;
  }
#+end_src

Although this may seem cryptic at first sight, the notational
convenience is considerable, and the idiom should be mastered, because
you will see it frequently in C programs.

(eventually you will get '\0' which is null terminator... so it ends)

#+name: strcmp
#+begin_src c
  /* strcmp: return <0 if s<t, 0 if s==t, >0 if s>t */
  int strcmp(char *s, char *t) {
    int i;
    for(i = 0; s[i] == t[i]; i++)
      if (s[i] == '\0')
        return 0;
    return s[i] - t[i];
  }
#+end_src

#+name: strcmp pointer version
#+begin_src c
  /* strcmp: return <0 if s<t, 0 if s==t, >0 if s>t */
  int strcmp(char *s, char *t) {
    for (; *s == *t; s++, t++)
      if (*s == '\0')
        return 0;
    return *s - *t;
  }
#+end_src

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
