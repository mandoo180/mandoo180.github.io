#+TITLE: Emacs Configurations
#+AUTHOR: Kyeong Soo Choi
#+STARTUP: overview
#+PROPERTY: header-args :emacs-lisp :mkdirp yes :results none

* Early Init

#+begin_src emacs-lisp :tangle ~/.emacs.d/early-init.el
  ;;; early-init.el --- Emacs-Solo (no external packages) Configuration  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;; Early init configuration for Emacs-Solo
  ;;; Code:

  ;; Startup hacks
  (setq gc-cons-threshold most-positive-fixnum
  	  gc-cons-percentage 0.6
  	  vc-handled-backends '(Git))

  ;; Hack to avoid being flashbanged
  (defun emacs-solo/avoid-initial-flash-of-light ()
    "Avoid flash of light when starting Emacs."
    (setq mode-line-format nil)
    ;; These colors should match your selected theme for maximum effect
    ;; Note that for catppuccin whenever we create a new frame or open it on terminal
    ;; it is necessary to reload the theme.
    ;; (set-face-attribute 'default nil :background "#292D3E" :foreground "#292D3E")
    )

  (emacs-solo/avoid-initial-flash-of-light)

  ;; Better Window Management handling
  (setq frame-resize-pixelwise t
  	  frame-inhibit-implied-resize t
  	  frame-title-format '("Emacs"))

  (setq inhibit-compacting-font-caches t)

  ;; Disables unused UI Elements
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (tool-bar-mode 0)
  (tooltip-mode 0)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t
  	  frame-resize-pixelwise t)

  (provide 'early-init)
  ;;; early-init.el ends here

#+end_src

* Init

#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el
  ;;; init.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package emacs
    :ensure nil
    :bind
    (("M-o"         . other-window)
     ("C-x r e"     . recentf)
     ("C-x C-b"     . ibuffer)
     ("C-x k"       .
  	(lambda ()
  	  "Kill current buffer."
  	  (interactive)
  	  (kill-buffer (buffer-name))))
     ("RET"         . newline-and-indent)
     ("S-<return>"  .
  	(lambda ()
  	  "New line and indent."
  	  (interactive)
  	  (end-of-line)
  	  (newline-and-indent)))
     ("C-z"         . nil)
     ("C-x C-z"     . nil)
     ("C-x C-k RET" . nil)
     ("C-S-j"       .
  	(lambda()
  	  "Custom join line."
  	  (interactive)
  	  (let ((beg (pos-eol))
  			(end (progn
  				   (next-line)
  				   (back-to-indentation)
  				   (point))))
  		(delete-region beg end))))
     (:map lisp-interaction-mode-map
  		 ("C-c C-c" . eval-last-sexp))
     (:map emacs-lisp-mode-map
  		 ("C-c C-c" . eval-last-sexp)))

    :custom
    (cursor-type '(bar . 3))
    (ad-redefinition-action 'accept)
    (column-number-mode nil)
    (line-number-mode nil)
    (completion-ignore-case t)
    (completions-detailed t)
    (completions-format 'one-column)
    (delete-by-moving-to-trash t)
    (display-line-numbers-width 6)
    (display-line-numbers-widen t)
    (delete-selection-mode 1)
    (enable-recursive minibuffers t)
    (find-ls-option '("-exec ls -ldh {} +" . "-ldh"))	; find-dired results with human readable sizes
    (frame-resize-pixelwise t)
    (global-auto-revert-non-file-buffers t)
    (auto-revert-verbose nil)
    (help-window-select t)
    (history-length 300)
    (inhibit-startup-message t)
    (initial-buffer-choice 'remember-notes)
    (initial-major-mode 'org-mode)
    (initial-scratch-message nil)
    ;; (ispell-dictionary "en_US")
    (kill-do-not-save-duplicates t)
    (create-lockfiles nil)				; No backup files
    (make-backup-files nil)				; No backup files
    (backup-inhibited t)					; No backup files
    (scroll-margin 0)
    (scroll-step 1)
    (scroll-conservatively 101)
    (pixel-scroll-precision-mode t)
    (pixel-scroll-precision-use-momentum nil)
    (ring-bell-function 'ignore)
    (read-answer-short t)
    (recentf-max-saved-items 300)			; default is 20
    (recentf-max-menu-items 15)
    (recentf-auto-cleanup (if (daemonp) 300 'never))
    (recentf-exclude (list "^/\\(?:ssh\\|su\\|sudo\\)?:"))
    (remote-file-name-inhibit-delete-by-moving-to-trash t)
    (remote-file-name-inhibit-auto-save t)
    (resize-mini-windows 'grow-only)
    (ring-bell-function #'ignore)
    (savehist-save-minibuffer-history t)	; t is default
    (savehist-additional-variables
     '(kill-ring							; clipboard
  	 register-alist						; macros
  	 mark-ring global-mark-ring			; marks
  	 search-ring regexp-search-ring))	; searches
    (save-place-file (expand-file-name "saveplace" user-emacs-directory))
    (save-place-limit 600)
    (set-mark-command-repeat-pop t) ; So we can use C-u C-SPC C-SPC C-SPC... instead of C-u C-SPC C-u C-SPC...
    (split-width-threshold 170)     ; So vertical splits are preferred
    (split-height-threshold nil)
    (shr-use-colors nil)
    (switch-to-buffer-obey-display-actions t)
    (tab-always-indent 'complete)
    (tab-width 4)
    (tab-bar-close-button-show nil)
    (tab-bar-new-button-show nil)
    (tab-bar-tab-hints t)
    (treesit-font-lock-level 4)
    (truncate-lines t)
    (undo-limit (* 13 160000))
    (undo-strong-limit (* 13 240000))
    (undo-outer-limit (* 13 24000000))
    (use-dialog-box nil)
    (use-file-dialog nil)
    (use-short-answers t)
    (visible-bell nil)
    (window-combination-resize t)
    (window-resize-pixelwise nil)
    (xref-search-program 'ripgrep)
    (grep-command "grep --color=always -nH --null -e ")
    (grep-find-ignored-directories
     '("SCCS" "RCS" "CVS" "MCVS" ".src" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "node_modules" "build" "dist"))
    (locale-coding-system 'utf-8)
    (keyboard-coding-system 'utf-8)
    (savehist-coding-system 'utf-8)
    (file-name-coding-system 'utf-8)
    (buffer-file-coding-system 'utf-8)
    (system-time-locale "C")

    :init
    (add-to-list 'default-frame-alist '(alpha-background . 100))
    (set-window-margins (selected-window) 2 0)
    (select-frame-set-input-focus (selected-frame))
    (global-auto-revert-mode 1)
    (global-goto-address-mode 1) ;; C-c RET to go
    (indent-tabs-mode nil)
    ;; While indent-tabs-mode nil prevents Emacs from inserting tabs for indentation, C-q TAB will always insert a literal tab character regardless of this setting.
    (recentf-mode 1)
    (repeat-mode 1)
    (savehist-mode 1)
    (save-place-mode 1)
    (winner-mode)
    (xterm-mouse-mode 1)
    (file-name-shadow-mode 1) ; allows us to type a new path without having to delete the current one
    (set-language-environment "Korean")
    (prefer-coding-system 'utf-8)
    (global-unset-key (kbd "S-SPC"))
    (put 'narrow-to-region 'disabled nil)
    (message (emacs-init-time))
    :config
    ;; Makes everything accept utf-8 as default, so buffers with tsx and so
    ;; won't ask for encoding (because undecided-unix) every single keystroke
    (modify-coding-system-alist 'file "" 'utf-8)
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)
    ;; Set line-number-mode with relative numbering
    (setq display-line-numbers-type 'absolute)
    (add-hook 'prog-mode-hook #'display-line-numbers-mode)
    ;; Add option "d" to whenever using C-x s or C-x C-c, allowing a quick preview
    ;; of the diff of what you're asked to save.
    (add-to-list 'save-some-buffers-action-alist
  			   (list "d"
  					 (lambda (buffer) (diff-buffer-with-file (buffer-file-name buffer)))
  					 "show diff between the buffer and its file"))
    ;; On Terminal: changes the vertical separator to a full vertical line
    ;;              and truncation symbol to a right arrow
    (set-display-table-slot standard-display-table 'vertical-border ?\u2502)
    (set-display-table-slot standard-display-table 'truncation ?\u2192)

    ;; Ibuffer filters
    (setq ibuffer-saved-filter-groups
  		'(("default"
  	       ("org" (or
  				   (mode . org-mode)
  				   (name . "^\\*Org Src")
  				   (name . "^\\*Org Agenda\\*$")))
  	       ("tramp" (name . "^\\*tramp.*"))
  	       ("emacs" (or
  					 (name . "^\\*scratch\\*$")
  					 (name . "^\\*Messages\\*$")
  					 (name . "^\\*Warnings\\*$")
  					 (name . "^\\*Shell Command Output\\*$")
  					 (name . "^\\*Async-native-compile-log\\*$")
  					 (name . "^\\*straight-")))
  	       ("ediff" (or
  					 (name . "^\\*ediff.*")
  					 (name . "^\\*Ediff.*")))
  	       ("dired" (mode . dired-mode))
  	       ("terminal" (or
  						(mode . term-mode)
  						(mode . shell-mode)
  						(mode . eshell-mode)))
  	       ("help" (or
  					(name . "^\\*Help\\*$")
  					(name . "^\\*info\\*$")
  					(name . "^\\*helpful"))))))
    (add-hook 'ibuffer-mode-hook
  			(lambda ()
  			  (ibuffer-switch-to-saved-filter-groups "default")))
    (setq ibuffer-show-empty-filter-groups nil) ; don't show empty groups
    ;; So eshell git commands open an instance of THIS config of Emacs
    (setenv "GIT_EDITOR" (format "emacs --init-dir=%s " (shell-quote-argument user-emacs-directory)))
    ;; So rebase from eshell opens with a bit of syntax highlight
    (add-to-list 'auto-mode-alist '("/git-rebase-todo\\'" . conf-mode))

    ;; Runs 'private.el' after Emacs inits
    (add-hook 'after-init-hook
  			(lambda ()
  			  (let ((private-file (expand-file-name "private.el" user-emacs-directory)))
  				(when (file-exists-p private-file)
  				  (load private-file)))))

    (use-package use-package
  	:custom
  	(package-archives '(("melpa"  . "https://melpa.org/packages/")
  						("org"    . "https://orgmode.org/elpa/")
  						("elpa"   . "https://elpa.gnu.org/packages/")
  						("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  	(use-package-always-ensure t)
  	(use-package-enable-at-startup nil)
  	(package-native-compile t)
  	(warning-minimun-level 'error))

    (eval-and-compile
  	(add-to-list 'load-path (expand-file-name "elisp/settings/" user-emacs-directory)))

    (cond ((eq system-type 'windows-nt)
  		 (require 'windows-conf))
  		((eq system-type 'darwin)
  		 (require 'macos-conf))
  		((eq system-type 'gnu/linux)
  		 (require 'linux-conf)))

    (require 'theme-conf)
    (require 'window-conf)
    (require 'completion-conf)
    (require 'dired-conf)
    (require 'note-conf)
    (require 'shell-conf)
    (require 'prog-conf)
    (require 'misc-conf)

    (require 'douzone-comet-config (expand-file-name "elisp/douzone-comet-config.el" user-emacs-directory) t)
    (require 'douzone-comet-service (expand-file-name "elisp/douzone-comet-service.el" user-emacs-directory) t)
    (require 'douzone-comet-ui (expand-file-name "elisp/douzone-comet-ui.el" user-emacs-directory) t)
    (require 'package-setup-function (expand-file-name "elisp/package-setup-function.el" user-emacs-directory) t))

  (provide 'init)
  ;;; init.el ends here
#+end_src

* Theme

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/theme-conf.el
  ;;; theme-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  ;; (use-package doom-themes
  ;;   :config
  ;;   (if (daemonp)
  ;; 	  (add-hook 'server-after-make-frame-hook (lambda () (load-theme 'doom-tokyo-night t)))
  ;; 	(load-theme 'doom-tokyo-night t)))

  (let ((theme-file (expand-file-name "themes/hasliberg-theme.el" user-emacs-directory)))
    (if (file-exists-p theme-file)
  	  (progn
  		(load-file theme-file)
  		(load-theme 'hasliberg t))))

  (use-package doom-modeline
    :init
    (setq mode-line-right-align-edge 'right-fringe) ;; or 'right-margin
    :custom
    (doom-modeline-height 40)
    (doom-modeline-bar-width 8)
    (doom-modeline-check-icon t)
    (doom-modeline-check-simple-format t)
    (doom-modeline-checker-simple-format t)
    (doom-modeline-hud t)
    (doom-modeline-window-width-limit nil)
    (doom-modeline-spc-face-overrides t)
    (doom-modeline-vcs-max-length 12)
    (doom-modeline-checker-simple-format nil)
    :config
    (if (daemonp)
  	  (add-hook 'server-after-make-frame-hook (lambda () (doom-modeline-mode 1)))
  	(doom-modeline-mode 1)))

  (use-package all-the-icons)
  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package beacon
    :config
    (beacon-mode 1))

  (provide 'theme-conf)
  ;;; theme-conf.el ends here
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/themes/hasliberg-theme.el
  ;;; hasliberg-theme.el --- Serene theme inspired by Swiss alps. -*- lexical-binding:t -*-

  ;; Copyright (C) 2024  Free Software Foundation, Inc.

  ;; Author: Ryota Sawada <rytswd@gmail.com>
  ;; Maintainer: Ryota Sawada <rytswd@gmail.com>
  ;; URL: https://github.com/rytswd/hasliberg-theme
  ;; Keywords: theme
  ;; Version: 0.1

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; The theme is only meant to provide my own prefered colour setup.

  ;;; Acknowledgments:

  ;; A lot of configurations were inspired by ef-themes by Prot.

  ;;; Code:

  ;;;###theme-autoload
  (deftheme hasliberg
    "Theme inspired by Swiss alps"
    :background-mode 'dark
    :kind 'color-scheme)

  ;;;;----------------------------------------
  ;;;   Configuration
  ;;------------------------------------------
  (defgroup hasliberg-theme nil
    "Options for hasliberg-theme."
    :group 'hasliberg-theme
    :prefix "hasliberg-theme-")
  (defconst hasliberg-theme-lch-type
    '(plist :options ((:luminance float)
  					(:chroma float)
  					(:hue float)))
    "A plist defining LuvLCh input.")
  (defun hasliberg-theme--validate-and-set-lch (symbol value)
    "Set SYMBOL to VALUE if it is a valid LCH colour.
  VALUE must be a plist containing :luminance, :chroma, and :hue with float values.
  Luminance should be between 0 and 100, chroma should be non-negative, and hue should be between 0 and 360."
    ;; This assumes the use of `hasliberg-theme-lch-type'.
    (let ((luminance (plist-get value :luminance))
  		(chroma (plist-get value :chroma))
  		(hue (plist-get value :hue))
  		(errors '()))
  	(unless (and luminance chroma hue)
  	  (push "LCH value must include :luminance, :chroma, and :hue" errors))
  	(unless (and (floatp luminance) (floatp chroma) (floatp hue))
  	  (push (format "LCH components must be float values: %S" value) errors))
  	(when (and luminance (or (< luminance 0) (> luminance 100)))
  	  (push (format "Luminance value %f must be between 0 and 100" luminance) errors))
  	;; NOTE: I need to double check on the valid chroma value.
  	;; I took this value from https://facelessuser.github.io/coloraide/colors/lchuv/
  	(when (and chroma (or (< chroma 0) (> chroma 220)))
  	  (push (format "Chroma value %f must be non-negative" chroma) errors))
  	(when (and hue (or (< hue 0) (>= hue 360)))
  	  (push (format "Hue value %f must be between 0 and 360" hue) errors))
  	(if errors
  		(error "Invalid LuvLCh value: %s" (string-join (reverse errors) "; "))
  	  (set-default symbol value))))
  (defcustom hasliberg-theme-dark-or-light 'dark
    "The theme variant, only dark is supported."
    :type '(const dark)
    :group 'hasliberg-theme)

  (defvar hasliberg-theme-colour-background         '(:luminance  7.877 :chroma  1.800 :hue 236.421))
  (defvar hasliberg-theme-colour-background-variant '(:luminance  6.265 :chroma 11.827 :hue 252.428))
  (defvar hasliberg-theme-colour-neutral            '(:luminance 95.074 :chroma 12.330 :hue 252.652))
  (defvar hasliberg-theme-colour-primary            '(:luminance 93.380 :chroma  2.848 :hue 192.490))
  (defvar hasliberg-theme-colour-secondary          '(:luminance 93.535 :chroma  3.844 :hue 169.497))
  (defvar hasliberg-theme-colour-accent             '(:luminance 76.373 :chroma 32.215 :hue 238.249))
  (defvar hasliberg-theme-colour-accent-variant     '(:luminance 76.373 :chroma 32.215 :hue 238.249))
  (defvar hasliberg-theme-colour-subtle             '(:luminance 77.751 :chroma 14.617 :hue  35.776))
  (defvar hasliberg-theme-colour-subtle-variant     '(:luminance 73.823 :chroma 11.749 :hue  80.830))
  (defvar hasliberg-theme-colour-info               '(:luminance 67.245 :chroma 10.890 :hue  19.862))
  (defvar hasliberg-theme-colour-warning            '(:luminance 67.236 :chroma 86.052 :hue  35.603))

  (defvar hasliberg-theme--load-path nil
    "Variable to store the load path of Hasliberg Theme.")
  (unless hasliberg-theme--load-path
    (setq hasliberg-theme--load-path load-file-name))

  (defun hasliberg-theme-reload ()
    "Re-evaluate the file and reload the config."
    (interactive)
    (load-file hasliberg-theme--load-path)
    (load-theme 'hasliberg t))

  (defun hasliberg-theme--lch-to-luv (lch)
    "Convert a colour from LCH to Luv.
  LCH is a plist with properties :luminance, :chroma, and :hue."
    (let* ((L (plist-get lch :luminance))
  		 (C (plist-get lch :chroma))
  		 (H-degree (plist-get lch :hue))
  		 ;; Convert degrees to radians
  		 (H-radians (* pi (/ H-degree 180.0))))
  	(list :l L
  		  :u (* C (cos H-radians))
  		  :v (* C (sin H-radians)))))

  (defun hasliberg-theme--luv-to-xyz (luv)
    "Convert a colour from Luv to XYZ.
  Luv is a plist with properties :l, :u and :v."
    (let* ((L (plist-get luv :l))
  		 (u (plist-get luv :u))
  		 (v (plist-get luv :v))
  		 ;; Constants for D65 illuminant
  		 (ref-u 0.19783000664283)
  		 (ref-v 0.46831999493879)
  		 (up (/ (+ u (* 13 L ref-u)) (* 13 L)))
  		 (vp (/ (+ v (* 13 L ref-v)) (* 13 L)))

  		 ;; Results
  		 (Y (if (> L 7.9996)
  				(expt (/ (+ L 16) 116.0) 3)
  			  (/ L 903.3)))
  		 ;; Ensure `vp` is not zero to avoid division by zero
  		 (X (if (zerop vp) 0
  			  (/ (* 9 Y up) (* 4 vp))))
  		 (Z (if (zerop vp) 0
  			  (/ (* (- 12 (* 3 up) (* 20 vp)) Y) (* 4 vp)))))
  	(list :x (* 100 X) :y (* 100 Y) :z (* 100 Z))))

  (defun hasliberg-theme--xyz-to-rgb (xyz)
    "Convert a colour from XYZ to RGB.
  XYZ is a plist with properties :x, :y, and :z."
    (let* ((X (/ (plist-get xyz :x) 100.0))
  		 (Y (/ (plist-get xyz :y) 100.0))
  		 (Z (/ (plist-get xyz :z) 100.0))
  		 ;; Linear transformation matrix for sRGB D65
  		 (R-linear (+ (* X 3.2406) (* Y -1.5372) (* Z -0.4986)))
  		 (G-linear (+ (* X -0.9689) (* Y 1.8758) (* Z 0.0415)))
  		 (B-linear (+ (* X 0.0557) (* Y -0.2040) (* Z 1.0570)))
  		 ;; Apply gamma correction
  		 (R (if (<= R-linear 0.0031308)
  				(* 12.92 R-linear)
  			  (- (* 1.055 (expt R-linear (/ 1.0 2.4))) 0.055)))
  		 (G (if (<= G-linear 0.0031308)
  				(* 12.92 G-linear)
  			  (- (* 1.055 (expt G-linear (/ 1.0 2.4))) 0.055)))
  		 (B (if (<= B-linear 0.0031308)
  				(* 12.92 B-linear)
  			  (- (* 1.055 (expt B-linear (/ 1.0 2.4))) 0.055))))
  	;; Clamp the results to the range [0, 1]
  	(list :r (min (max R 0.0) 1.0)
  		  :g (min (max G 0.0) 1.0)
  		  :b (min (max B 0.0) 1.0))))

  (defun hasliberg-theme--rgb-to-hex (rgb)
    "Convert a colour from RGB to Hex.
  RGB is a plist with properties :r, :g, and :b, where each value is in the range [0, 1]."
    (let* ((r (round (* (plist-get rgb :r) 255)))
  		 (g (round (* (plist-get rgb :g) 255)))
  		 (b (round (* (plist-get rgb :b) 255))))
  	(format "#%02X%02X%02X" r g b)))

  (defun hasliberg-theme--lch-to-rgb (lch)
    "Convert a colour from LCH to RGB in Hex.
  LCH is a plist with properties :luminance, :chroma, and :hue."
    (let* ((luv (hasliberg-theme--lch-to-luv lch))
  		 (xyz (hasliberg-theme--luv-to-xyz luv))
  		 (rgb (hasliberg-theme--xyz-to-rgb xyz)))
  	(hasliberg-theme--rgb-to-hex rgb)))

  (defun hasliberg-theme--hex-to-rgb (hex)
    "Convert a colour from Hex to RGB.
  HEX can be a string in the form \"#RRGGBB\", \"RRGGBB\", \"#RGB\", or \"RGB\"."
    ;; Normalize the hex string by removing a leading #
    (let* ((normalized-hex (if (eq (aref hex 0) ?#)
  							 (substring hex 1)
  						   hex))
  		 ;; Expand 3-digit color code to 6-digit format if necessary
  		 (expanded-hex (if (= (length normalized-hex) 3)
  						   (apply 'concat (mapcar (lambda (c) (make-string 2 c)) normalized-hex))
  						 normalized-hex)))
  	;; Ensure the string has the correct length of 6 characters
  	(when (not (= (length expanded-hex) 6))
  	  (error "Invalid hex colour format, expected 3 or 6 characters"))
  	(list :r (/ (string-to-number (substring expanded-hex 0 2) 16) 255.0)
  		  :g (/ (string-to-number (substring expanded-hex 2 4) 16) 255.0)
  		  :b (/ (string-to-number (substring expanded-hex 4 6) 16) 255.0))))

  (defun hasliberg-theme--rgb-to-xyz (rgb)
    "Convert a colour from RGB to XYZ.
  RGB is a plist with properties :r, :g, and :b,
  where each value is in the range [0, 1]."
    (let* ((linearize (lambda (c)
  					  (if (<= c 0.04045)
  						  (/ c 12.92)
  						(expt (/ (+ c 0.055) 1.055) 2.4))))
  		 (R-linear (funcall linearize (plist-get rgb :r)))
  		 (G-linear (funcall linearize (plist-get rgb :g)))
  		 (B-linear (funcall linearize (plist-get rgb :b))))
  	(list :x (* 100 (+ (* R-linear 0.4124) (* G-linear 0.3576) (* B-linear 0.1805)))
  		  :y (* 100 (+ (* R-linear 0.2126) (* G-linear 0.7152) (* B-linear 0.0722)))
  		  :z (* 100 (+ (* R-linear 0.0193) (* G-linear 0.1192) (* B-linear 0.9505))))))

  (defun hasliberg-theme--xyz-to-luv (xyz)
    "Convert a colour from XYZ to Luv.
  XYZ is a plist with properties :x, :y, and :z."
    (let* ((X (/ (plist-get xyz :x) 100.0))
  		 (Y (/ (plist-get xyz :y) 100.0))
  		 (Z (/ (plist-get xyz :z) 100.0))
  		 ;; Constants for D65 illuminant
  		 (ref-X 0.95047)
  		 (ref-Y 1.00000)
  		 (ref-Z 1.08883)
  		 (ref-u (/ (* 4 ref-X) (+ ref-X (* 15 ref-Y) (* 3 ref-Z))))
  		 (ref-v (/ (* 9 ref-Y) (+ ref-X (* 15 ref-Y) (* 3 ref-Z))))
  		 (u (/ (* 4 X) (+ X (* 15 Y) (* 3 Z))))
  		 (v (/ (* 9 Y) (+ X (* 15 Y) (* 3 Z))))
  		 (L (if (> Y 0.008856)
  				(- (* 116 (expt Y (/ 1.0 3))) 16)
  			  (* 903.3 Y)))
  		 (u-prime (* 13 L (- u ref-u)))
  		 (v-prime (* 13 L (- v ref-v))))
  	(list :l L :u u-prime :v v-prime)))

  (defun hasliberg-theme--xyz-to-luv (xyz)
    "Convert a colour from XYZ to Luv.
  XYZ is a plist with properties :x, :y, and :z."
    (let* ((X (/ (plist-get xyz :x) 100.0))
  		 (Y (/ (plist-get xyz :y) 100.0))
  		 (Z (/ (plist-get xyz :z) 100.0))
  		 ;; Constants for D65 illuminant
  		 (ref-X 0.95047)
  		 (ref-Y 1.00000)
  		 (ref-Z 1.08883)
  		 (ref-u (/ (* 4 ref-X) (+ ref-X (* 15 ref-Y) (* 3 ref-Z))))
  		 (ref-v (/ (* 9 ref-Y) (+ ref-X (* 15 ref-Y) (* 3 ref-Z))))
  		 (u (/ (* 4 X) (+ X (* 15 Y) (* 3 Z))))
  		 (v (/ (* 9 Y) (+ X (* 15 Y) (* 3 Z))))
  		 (L (if (> Y 0.008856)
  				(- (* 116 (expt Y (/ 1.0 3))) 16)
  			  (* 903.3 Y)))
  		 (u-prime (* 13 L (- u ref-u)))
  		 (v-prime (* 13 L (- v ref-v))))
  	(list :l L :u u-prime :v v-prime)))

  (defun hasliberg-theme--luv-to-lch (luv)
    "Convert a colour from Luv to LCH.
  LUV is a plist with properties :l, :u, and :v."
    (let* ((L (plist-get luv :l))
  		 (u (plist-get luv :u))
  		 (v (plist-get luv :v))
  		 (C (sqrt (+ (* u u) (* v v))))
  		 (H (atan v u))
  		 ;; Convert radians to degrees and ensure the hue is positive
  		 (H-degree (mod (/ (* H 180.0) pi) 360.0))
  		 (format-3dp (lambda (num)
  					   (string-to-number (format "%.3f" num)))))
  	(list :luminance (funcall format-3dp L)
  		  :chroma (funcall format-3dp C)
  		  :hue (funcall format-3dp H-degree))))

  (defun hasliberg-theme--rgb-to-lch (hex)
    "Convert a colour from RGB Hex to LCH in Luv space.
  HEX is a string in the form \"#RRGGBB\"."
    (let* ((rgb (hasliberg-theme--hex-to-rgb hex))
  		 (xyz (hasliberg-theme--rgb-to-xyz rgb))
  		 (luv (hasliberg-theme--xyz-to-luv xyz)))
  	(hasliberg-theme--luv-to-lch luv)))

  (defun hasliberg-theme-convert-rgb-selection-to-lch (start end)
    "Convert RGB Hex selection to LCH in Luv space,
  and insert after the selection. This can be helpful for setting up
  the new base colours, but not strictly necessary."
    (interactive "r")
    (let* ((hex (buffer-substring-no-properties start end))
  		 (lch (hasliberg-theme--rgb-to-lch hex)))
  	(goto-char end)
  	(insert
  	 " "
  	 (format "'(:luminance %.3f :chroma %.3f :hue %.3f)"
  			 (plist-get lch :luminance)
  			 (plist-get lch :chroma)
  			 (plist-get lch :hue)))))

  (defun hasliberg-theme-convert-lch-selection-to-rgb (start end)
    "Convert LCH value selection to RGB Hex,
  and insert after the selection. This can be helpful for setting up
  the new base colours, but not strictly necessary."
    (interactive "r")
    (let* ((lch-selection (buffer-substring-no-properties start end))
  		 (lch-string (if (string-prefix-p "'" lch-selection)
  						 (substring lch-selection 1)
  					   lch-selection))
  		 (lch (read lch-string))
  		 (hex (hasliberg-theme--lch-to-rgb lch)))
  	(goto-char end)
  	(insert " " hex)))

  (defvar hasliberg-theme-shades nil
    "All shades for the Hasliberg theme colours based on LuvLCh input.
  The values here are not meant to be updated manually.")

  (defvar hasliberg-theme-shades-hash (make-hash-table :test 'equal)
    "Hash table of all Hasliberg theme shades for fast lookup.
  The values here are not meant to be updated manually.")

  (defun hasliberg-theme--generate-lch-shades (base-lch)
    "Generate a list of shades for a given LCH base colour. This takes in the
  dark / light theme variable into account, and changes the way it generates
  the shades. The higher values (e.g. 600, 700, so on) are meant to provide
  more contrast and appear brighter based on the background.

  In case of dark background, the higher values would result in brighter, more
  white colours. In case of light background, they would result in darker, more
  black colours."
    (let* ((l (plist-get base-lch :luminance))
  		 (c (plist-get base-lch :chroma))
  		 (h (plist-get base-lch :hue))
  		 (shades '(50 100 200 300 400 500 600 700 800 900 950))
  		 (dark-or-light hasliberg-theme-dark-or-light)
  		 (luminance-steps
  		  (mapcar (lambda (step)
  					;; Based on dark or light selection, flip the shades.
  					(if (eq dark-or-light 'dark)
  						(+ l (* (- step 500) 0.1))
  					  (- l (* (- step 500) 0.1))))
  					shades)))
  	(mapcar
  	 (lambda (lum)
  	   (hasliberg-theme--lch-to-rgb
  		(list :luminance lum :chroma c :hue h)))
  	 luminance-steps)))

  ;; This is a bit manual but working.
  (defun hasliberg-theme--generate-all-shades ()
    "Generate all shades for the colours defined with customization with the prefix of `hasliberg-theme-colour-'."
    (let* ((prefix "hasliberg-theme-colour-")
  		 (pflen (length prefix))
  		 (customs '(hasliberg-theme-colour-background
  					hasliberg-theme-colour-background-variant
  					hasliberg-theme-colour-neutral
  					hasliberg-theme-colour-primary
  					hasliberg-theme-colour-secondary
  					hasliberg-theme-colour-accent
  					hasliberg-theme-colour-accent-variant
  					hasliberg-theme-colour-subtle
  					hasliberg-theme-colour-subtle-variant
  					hasliberg-theme-colour-info
  					hasliberg-theme-colour-warning))
  		 (colours (cl-loop for c in customs
  						   collect (cons (intern (substring (symbol-name c) pflen))
  										 (symbol-value c)))))
  	(mapcar
  	 (lambda (colour)
  	   (let* ((name (car colour))
  			  (base-lch (cdr colour))
  			  (shades (hasliberg-theme--generate-lch-shades base-lch)))
  		 `(,name . ,(cl-pairlis '(50 100 200 300 400 500 600 700 800 900 950) shades))))
  	 colours)))

  (defun hasliberg-theme--update-shades ()
    "Update the shades and hash table based on the colour variables."
    (setq hasliberg-theme-shades (hasliberg-theme--generate-all-shades))
    (clrhash hasliberg-theme-shades-hash)
    (cl-loop for (name . shades) in hasliberg-theme-shades
  		   do (cl-loop for (shade-name . shade-value) in shades
  					   do (puthash (format "%s-%s" name shade-name)
  								   shade-value
  								   hasliberg-theme-shades-hash))))

  (defun hasliberg-theme-hex-for (key)
    "Retrieve the Hex colour using a hashed KEY."
    (gethash (symbol-name key) hasliberg-theme-shades-hash))

  (defun hasliberg-theme--update-standard-faces ()
    (custom-theme-set-faces
     'hasliberg
     ;;;;----------------------------------------
     ;;;   Basic Faces
     ;;------------------------------------------
     `(default
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(bold ((t :weight bold)))
     `(italic ((t :slant italic)))
     `(bold-italic ((t :inherit (bold italic))))
     `(link
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-400))))
     `(highlight
  	 ((t :background ,(hasliberg-theme-hex-for 'background-variant-700))))

     `(cursor ((t :background ,(hasliberg-theme-hex-for 'accent-700))))
     `(region
  	 ((t :background ,(hasliberg-theme-hex-for 'background-700)
  		 :foreground ,(hasliberg-theme-hex-for 'subtle-600))))
     `(secondary-selection
  	 ((t :background ,(hasliberg-theme-hex-for 'background-variant-600)
  		 :foreground ,(hasliberg-theme-hex-for 'subtle-600))))
     `(whitespace-space ((t :foreground ,(hasliberg-theme-hex-for 'background-600))))
     `(whitespace-tab ((t :foreground ,(hasliberg-theme-hex-for 'background-600))))

     `(isearch ((t :background ,(hasliberg-theme-hex-for 'primary-300))))
     `(success ((t :foreground ,(hasliberg-theme-hex-for 'info-700)
  				 )))
     `(warning ((t :foreground ,(hasliberg-theme-hex-for 'warning-500)
  				 )))
     `(minibuffer-prompt ((t :foreground ,(hasliberg-theme-hex-for 'primary-500)
  						   :weight semibold)))

     ;;;;----------------------------------------
     ;;;   Visual Elements
     ;;------------------------------------------
     ;; Configurations around some standard visual elements such as mode lines.
     ;; These tend to have more complicated configuration, and thus I'm making them
     ;; multiline and make it easier to edit later.
     `(fringe
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'accent-100))))
     `(menu
  	 ((t :background ,(hasliberg-theme-hex-for 'background-300)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(scroll-bar
  	 ((t :background ,(hasliberg-theme-hex-for 'background-300)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(tool-bar
  	 ((t :background ,(hasliberg-theme-hex-for 'background-300)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(vertical-border
  	 ((t :foreground ,(hasliberg-theme-hex-for 'background-300))))
     `(header-line
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-300))))
     `(tab-bar
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(tab-bar-tab
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(tab-bar-inactive
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-700))))
     `(tab-bar-tab-group-current
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-500)
  		 :underline t)))
     `(tab-bar-tab-group-inactive
  	 ((t :foreground ,(hasliberg-theme-hex-for 'secondary-400))))

     ;; Border used for posframe.
     `(child-frame-border ((t :background ,(hasliberg-theme-hex-for 'primary-300))))
     ;; Mode Line
     `(mode-line
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-300)
  		 ;; :overline   ,(hasliberg-theme-hex-for 'accent-500)
  		 ;; :underline (:color ,(hasliberg-theme-hex-for 'accent-500) :position 0)
  		 ;; :box nil
  		 )))
     `(mode-line-active
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-300)
  		 :overline   ,(hasliberg-theme-hex-for 'neutral-500)
  		 ;; :underline (:color ,(hasliberg-theme-hex-for 'accent-500) :position 0)
  		 ;; :box nil
  		 )))
     `(mode-line-inactive
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-200)
  		 :underline  nil
  		 :overline   nil
  		 ;; :box nil
  		 )))

     ;;;;----------------------------------------
     ;;;   Line Numbers
     ;;------------------------------------------
     ;; Includes display-line-numbers-mode and global variant.

     `(line-number
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-50))))
     `(line-number-current-line
  	 ((t :inherit line-number
  		 :foreground ,(hasliberg-theme-hex-for 'accent-500)
  		 :weight semibold)))
     `(line-number-major-tick
  	 ((t :inherit line-number
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-600))))
     `(line-number-minor-tick
  	 ((t :inherit line-number)))

     ;;;;----------------------------------------
     ;;;   Font lock
     ;;------------------------------------------
     ;; Accent colour only used sparingly.
     `(font-lock-string-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-500)
  		 :weight thin)))
     ;; Any user defined fields are based on one variant.
     `(font-lock-function-name-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-400)
  		 :weight regular)))
     `(font-lock-variable-name-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-400))))
     `(font-lock-constant-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-700)
  		 :weight semibold)))
     `(font-lock-type-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-600)
  		 :weight regular)))
     ;; Any basic fields are based on another variant.
     `(font-lock-keyword-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-700)
  		 :weight semibold)))
     `(font-lock-builtin-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-400))))
     `(font-lock-property-name-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'secondary-700))))

     `(font-lock-negation-char-face
  	 ((t :inherit bold
  		 :foreground ,(hasliberg-theme-hex-for 'secondary-500))))
     `(font-lock-preprocessor-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-300))))

     `(font-lock-comment-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-200))))
     `(font-lock-comment-delimiter-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-200))))
     `(font-lock-doc-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'info-700))))

     `(font-lock-property-use-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-600))))
     `(font-lock-regexp-grouping-backslash
  	 ((t :inherit bold
  		 :foreground ,(hasliberg-theme-hex-for 'subtle-variant-500))))
     `(font-lock-regexp-grouping-construct
  	 ((t :inherit bold
  		 :foreground ,(hasliberg-theme-hex-for 'subtle-variant-500))))
     `(font-lock-warning-face
  	 ((t :foreground ,(hasliberg-theme-hex-for 'warning-500))))

     ;;;;----------------------------------------
     ;;;   Org Mode
     ;;------------------------------------------
     `(org-document-title
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-700))))
     `(org-level-1
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-500))))
     `(org-level-2
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-600))))
     `(org-level-3
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-700))))
     `(org-level-4
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-variant-800))))
     `(org-level-5
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-variant-900))))
     `(org-level-6
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-variant-900))))
     `(org-special-keyword
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-200))))
     `(org-code
  	 ((t :foreground ,(hasliberg-theme-hex-for 'primary-500))))
     `(org-verbatim
  	 ((t :background ,(hasliberg-theme-hex-for 'background-400)
  		 :foreground ,(hasliberg-theme-hex-for 'primary-400))))
     `(org-ellipsis
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-700)
  		 :underline nil)))
     `(org-hide ((t :foreground ,(hasliberg-theme-hex-for 'background-500))))
     `(org-block
  	 ((t :foreground ,(hasliberg-theme-hex-for 'subtle-variant-500))))
     `(org-block-begin-line
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'primary-400)
  		 :overline   ,(hasliberg-theme-hex-for 'background-700))))
     `(org-block-end-line
  	 ((t :background ,(hasliberg-theme-hex-for 'background-500)
  		 :foreground ,(hasliberg-theme-hex-for 'primary-400)
  		 :underline (:color ,(hasliberg-theme-hex-for 'background-700) :position 0))))
     `(org-quote
  	 ((t :foreground ,(hasliberg-theme-hex-for 'accent-900) :slant oblique)))
     `(org-verse
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-600))))
     `(org-table
  	 ((t :background ,(hasliberg-theme-hex-for 'background-600)
  		 :foreground ,(hasliberg-theme-hex-for 'neutral-600))))

     `(org-drawer ((t :inherit font-lock-comment-face)))
     `(org-property-value ((t :inherit font-lock-comment-face)))
     `(org-tag ((t :foreground ,(hasliberg-theme-hex-for 'neutral-300))))
     `(org-document-info-keyword
  	 ((t :foreground ,(hasliberg-theme-hex-for 'neutral-300))))
     `(org-meta-line ((t :inherit org-document-info-keyword)))
     `(org-checkbox ((t :box nil)))

     ;; Todo related handling
     `(org-headline-done ((t :foreground ,(hasliberg-theme-hex-for 'neutral-200))))
     ;; Agenda
     `(org-agenda-structure ((t :foreground ,(hasliberg-theme-hex-for 'primary-500))))
     `(org-agenda-done ((t :foreground ,(hasliberg-theme-hex-for 'neutral-100))))
     `(org-upcoming-deadline ((t :foreground ,(hasliberg-theme-hex-for 'warning-800))))
     `(org-scheduled-today ((t :foreground ,(hasliberg-theme-hex-for 'neutral-500))))
     `(org-scheduled-previously ((t :foreground ,(hasliberg-theme-hex-for 'warning-400))))
     `(org-agenda-structure ((t :foreground ,(hasliberg-theme-hex-for 'primary-200))))
     `(org-agenda-current-time ((t :foreground ,(hasliberg-theme-hex-for 'accent-variant-700))))
     `(org-time-grid ((t :foreground ,(hasliberg-theme-hex-for 'neutral-100))))
     `(org-habit-clear-face ((t :background ,(hasliberg-theme-hex-for 'background-variant-500))))
     `(org-habit-clear-future-face ((t :background ,(hasliberg-theme-hex-for 'background-variant-600))))
     `(org-habit-alert-face ((t :background ,(hasliberg-theme-hex-for 'accent-variant-400))))
     `(org-habit-alert-future-face ((t :background ,(hasliberg-theme-hex-for 'primary-200))))
     `(org-habit-overdue-face ((t :background ,(hasliberg-theme-hex-for 'background-600))))
     `(org-habit-overdue-future-face ((t :background ,(hasliberg-theme-hex-for 'background-600))))))

  (defun hasliberg-theme--update-echo-buffer ()
    (dolist (buffer (list " *Minibuf-0*" " *Echo Area 0*"
  						" *Minibuf-1*" " *Echo Area 1*"))
  	(when (get-buffer buffer)
  	  (with-current-buffer buffer
  		;; TODO: I should use colour definitions instead.
  		(face-remap-add-relative 'default 'font-lock-preprocessor-face)))))

  ;; Third party faces
  (defun hasliberg-theme--update-mode-line-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   Mode Line
    ;;------------------------------------------
    ;; Doom Mode Line related
    `(doom-modeline-buffer-modified
  	((t :inherit (doom-modeline)
  		:foreground ,(hasliberg-theme-hex-for 'accent-600)
  		:weight semibold)))
    `(doom-modeline-project-parent-dir
  	((t :inherit (doom-modeline)
  		:slant oblique)))))

  (defun hasliberg-theme--update-dashboard-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   Dashboard
    ;;------------------------------------------
    `(dashboard-banner-logo-title
  	((t :foreground ,(hasliberg-theme-hex-for 'primary-500)
  		:weight semibold)))
    `(dashboard-heading
  	((t :foreground ,(hasliberg-theme-hex-for 'primary-600)
  		:weight semibold)))
    `(dashboard-footer-face
  	((t :slant oblique
  		:foreground ,(hasliberg-theme-hex-for 'primary-800))))))

  (defun hasliberg-theme--update-org-related-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   Org Mode
    ;;------------------------------------------
    ;; Other Org Mode related handling (third party)
    `(org-modern-todo ((t :background ,(hasliberg-theme-hex-for 'primary-600))))
    `(org-modern-symbol ((t :foreground ,(hasliberg-theme-hex-for 'neutral-500))))))

  (defun hasliberg-theme--update-markdown-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   Markdown
    ;;------------------------------------------
    ;; I work with markdown only when I have to. Org Mode is my preference,
    ;; and thus all the configurations here are only to inherit from Org Mode.
    `(markdown-header-face-1 ((t :inherit org-level-1)))
    `(markdown-header-face-2 ((t :inherit org-level-2)))
    `(markdown-header-face-3 ((t :inherit org-level-3)))
    `(markdown-header-face-4 ((t :inherit org-level-4)))
    `(markdown-header-face-5 ((t :inherit org-level-5)))
    `(markdown-header-delimiter-face
  	((t :foreground ,(hasliberg-theme-hex-for 'accent-200))))
    `(markdown-language-keyword-face ((t :inherit org-block)))
    `(markdown-table-face ((t :inherit org-table)))
    `(markdown-pre-face ((t :inherit org-block)))
    `(markdown-html-attr-name-face
  	((t :inherit org-block
  		:foreground ,(hasliberg-theme-hex-for 'primary-600))))
    `(markdown-html-attr-value-face
  	((t :inherit org-block
  		:foreground ,(hasliberg-theme-hex-for 'primary-800))))
    `(markdown-html-entity-face
  	((t :inherit org-block
  		:foreground ,(hasliberg-theme-hex-for 'primary-500))))
    `(markdown-html-tag-delimiter-face
  	((t :inherit org-block
  		:foreground ,(hasliberg-theme-hex-for 'primary-300))))
    `(markdown-html-tag-name-face
  	((t :inherit org-block
  		:foreground ,(hasliberg-theme-hex-for 'primary-700))))))

  (defun hasliberg-theme--update-lsp-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   LSP
    ;;------------------------------------------
    `(lsp-face-highlight-textual
  	((t :background ,(hasliberg-theme-hex-for 'background-variant-700))))
    `(lsp-headerline-breadcrumb-path-face
  	((t :foreground ,(hasliberg-theme-hex-for 'primary-500))))
    `(lsp-headerline-breadcrumb-symbols-face
  	((t :foreground ,(hasliberg-theme-hex-for 'primary-700)
  		:weight semibold)))))

  (defun hasliberg-theme--update-language-specific-faces ()
   (custom-theme-set-faces
    'hasliberg
    ;;;;----------------------------------------
    ;;;   Language Specific Ones
    ;;------------------------------------------
    `(sh-quoted-exec ((t :foreground ,(hasliberg-theme-hex-for 'accent-600))))
    `(sh-heredoc ((t :foreground ,(hasliberg-theme-hex-for 'accent-700))))))

  (defun hasliberg-theme--update-all-faces ()
    "Update all faces."
    (hasliberg-theme--update-standard-faces)
    (hasliberg-theme--update-echo-buffer)
    (hasliberg-theme--update-mode-line-faces)
    (hasliberg-theme--update-dashboard-faces)
    (hasliberg-theme--update-org-related-faces)
    (hasliberg-theme--update-markdown-faces)
    (hasliberg-theme--update-lsp-faces)
    (hasliberg-theme--update-language-specific-faces))

  ;;;;----------------------------------------
  ;;;   Finalise
  ;;------------------------------------------
  (hasliberg-theme--update-shades)
  (hasliberg-theme--update-all-faces)
  (when load-file-name
    (add-to-list 'custom-theme-load-path
  			   (file-name-as-directory (file-name-directory load-file-name))))

  (provide-theme 'hasliberg)
#+end_src

* Window

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/window-conf.el
  ;;; window-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package window
    :ensure nil
    :custom
    (display-buffer-alist
     '(
  	 ;; ("\\*.*e?shell\\*"
  	 ;;  (display-buffer-in-side-window)
  	 ;;  (window-height . 0.25)
  	 ;;  (side . bottom)
  	 ;;  (slot . -1))
  	 ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|Messages\\|Bookmark List\\|Occur\\|eldoc\\)\\*"
  	  (display-buffer-in-side-window)
  	  (window-height . 0.25)
  	  (side . bottom)
  	  (slot . 0))
  	 ("\\*\\([Hh]elp\\)\\*"
  	  (display-buffer-in-side-window)
  	  (window-width . 75)
  	  (side . right)
  	  (slot . 0))
  	 ("\\*\\(Ibuffer\\)\\*"
  	  (display-buffer-in-side-window)
  	  (window-width . 100)
  	  (side . right)
  	  (slot . 1))
  	 ("\\*\\(Flymake diagnostics\\|xref\\|Completions\\)"
  	  (display-buffer-in-side-window)
  	  (window-height . 0.25)
  	  (side . bottom)
  	  (slot . 1))
  	 ("\\*\\(grep\\|find\\)\\*"
  	  (display-buffer-in-side-window)
  	  (window-height . 0.25)
  	  (side . bottom)
  	  (slot . 2))
  	 )))
  (provide 'window-conf)
  ;;; window-conf.el ends here
#+end_src

* Completion

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/completion-conf.el
  ;;; completion-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package vertico
    :init
    (vertico-mode))

  (use-package savehist
    :init
    (savehist-mode))

  (use-package orderless
    :ensure t
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :ensure t
    :diminish
    :config
    (marginalia-mode t))

  (use-package consult
    :ensure t
    :bind
    ;; C-x bindings
    ("C-x C-r" . consult-recent-file)
    ("C-x b" . consult-buffer)
    ("C-x 4 b" . consult-buffer-other-window)
    ("C-x 5 b" . consult-buffer-other-frame)
    ("C-x t b" . consult-buffer-other-tab)
    ("C-x r b" . consult-bookmark)
    ("C-x p b" . consult-project-buffer)
    ;; Custom M-# bindings for fast register access
    ("M-#" . consult-register-load)
    ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
    ("C-M-#" . consult-register)
    ("M-y" . consult-yank-pop)
    ;; M-g bindings
    ("M-g M-g" . consult-goto-line)
    ;; C-c s bindings in `search-map'
    ("C-c s e" . consult-complie-error)
    ("C-c s f" . consult-flymake)
    ("C-c s o" . consult-outline)
    ("C-c s m" . consult-mark)
    ("C-c s M" . consult-global-mark)
    ("C-c s i" . consult-imenu)
    ("C-c s I" . consult-imenu-multi)
    ("C-c s d" . consult-find)                  ;; Alternative: consult-fd
    ("C-c s c" . consult-locate)
    ("C-c s g" . consult-grep)
    ("C-c s v" . consult-git-grep)
    ("C-c s r" . consult-ripgrep)
    ("C-c s l" . consult-line)
    ("C-c s L" . consult-line-multi)
    ("C-c s k" . consult-keep-lines)
    ("C-c s u" . consult-focus-lines)
    ("C-c s h" . consult-org-heading))

  ;; (use-package corfu
  ;;   ;; Optional customizations
  ;;   :custom
  ;;   (corfu-cycle t)                   ;; Enable cycling for `corfu-next/previous'
  ;;   (corfu-auto t)                    ;; Enable auto completion
  ;;   (corfu-auto-delay 0.1)
  ;;   (corfu-auto-prefix 4)             ;; Minimum prefix length for auto completion
  ;;   ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;;   ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;;   ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;;   ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;;   ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;;   ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;;   ;; (corfu-scroll-margin 5)        ;; Use scroll margin
  ;;   ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  ;;   :hook ((prog-mode . corfu-mode))
  ;;   :config
  ;;   (keymap-set corfu-map "RET" #'corfu-send))

  (provide 'completion-conf)
  ;;; completion-conf.el ends here
#+end_src

* Dired

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/dired-conf.el
  ;;; dired-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package dired
    :ensure nil
    :custom
    (dired-listing-switches "-ahl"))
  (use-package dired-filter)
  (use-package dired-subtree
    :bind (:map dired-mode-map ("C-," . dired-subtree-toggle)))


  (provide 'dired-conf)
  ;;; dired-conf.el ends here
#+end_src

* Note

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/note-conf.el
  ;;; note-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package org-contrib)
  (use-package ob-typescript)
  (use-package ob-powershell)
  (use-package org
    :pin org
    :commands (org-capture org-agenda)
    :custom
    (org-agenda-start-with-log-mode t)
    (org-catch-invisible-edits 'show)
    (org-edit-timestamp-down-means-later t)
    (org-export-coding-system 'utf-8)
    (org-export-kill-product-buffer-when-displayed t)
    (org-fast-tag-selection-single-key 'expert)
    (org-hide-emphasis-markers t)
    (org-html-validation-link nil)
    (org-image-actual-width '(450))
    (org-log-done 'time)
    (org-log-into-drawer t)
    (org-pretty-entities nil)
    (org-startup-indented nil)
    (org-startup-with-inline-images t)
    (org-tags-column 80)
    (org-src-window-setup 'current-window)
    :config
    (require 'org-tempo)
    (require 'ob-js)
    (require 'ob-typescript)
    (require 'ob-ruby)
    (add-to-list 'org-structure-template-alist '("txt"  . "src text"))
    (add-to-list 'org-structure-template-alist '("sh"   . "src shell"))
    (add-to-list 'org-structure-template-alist '("zsh"  . "src zsh"))
    (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
    (add-to-list 'org-structure-template-alist '("posh" . "src powershell"))
    (add-to-list 'org-structure-template-alist '("el"   . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py"   . "src python"))
    (add-to-list 'org-structure-template-alist '("js"   . "src js"))
    (add-to-list 'org-structure-template-alist '("ts"   . "src typescript"))
    (add-to-list 'org-structure-template-alist '("java" . "src java"))
    (add-to-list 'org-structure-template-alist '("scm"  . "src scheme"))
    (add-to-list 'org-structure-template-alist '("sql"  . "src sql"))
    (add-to-list 'org-structure-template-alist '("rust" . "src rust"))
    (add-to-list 'org-structure-template-alist '("rb"   . "src ruby"))
    (org-babel-do-load-languages
     'org-babel-load-languages
     (seq-filter
  	(lambda (pair)
  	  (locate-library (concat "ob-" (symbol-name (car pair)))))
  	'((dot        . t)
  	  (gnuplot    . t)
  	  (latex      . t)
  	  (python     . t)
  	  (js         . t)
  	  (typescript . t)
  	  (shell      . t)
  	  (zsh        . t)
  	  (bash       . t)
  	  (posh       . t)
  	  (powershell . t)
  	  (scheme     . t)
  	  (sql        . t)
  	  (sqlite     . t)
  	  (ruby       . t))))
    (defun handle-electric-pair-inhibit (c)
  	(if (char-equal c ?<) t (,electric-pair-inhibit-predicate c)))
    (defun handle-org-mode-hook()
  	(setq-local electric-pair-inhibit-predicate #'handle-electric-pair-inhibit))
    (add-hook 'org-mode-hook #'handle-org-mode-hook))

  (use-package org-appear
    :hook
    (org-mode . org-appear-mode)
    :custom
    (org-appear-autoemphasis t)
    (org-appear-autolinks t)
    (org-appear-autosubmarkers t)
    (org-appear-autoentities t)
    (org-appear-autokeywords t)
    (org-appear-inside-latex t)
    (org-appear-delay 0.0)
    (org-appear-trigger 'always))

  (use-package markdown-mode
    :custom
    (markdown-split-window-direction 'right))

  (provide 'note-conf)
  ;;; note-conf.el ends here
#+end_src

If want some PDF stuff.

Reference some ideas: [[https://emacselements.com/pdf-tools-settings.html][EmacsElements]]

#+begin_src emacs-lisp :tangle no
  ;;; pdf-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (pdf-tools-install)
  (use-package saveplace-pdf-view)
  (global-goto-address-mode t)
  (provide 'pdf-conf)
  ;;; pdf-conf.el ends here
#+end_src

* Shell

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/shell-conf.el
  ;;; shell-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (when (eq system-type 'gnu/linux)
    (use-package eat
  	:bind (("C-c `" . eat))
  	:hook ((eat-exit . pgm/kill-eat-buffer-on-exit))
  	:config
  	(defun pgm/kill-eat-buffer-on-exit (process)
  	  "Kill the eat buffer when the shell process exits."
  	  (let ((buf (process-buffer process)))
	  (when (buffer-live-p buf)
	    (kill-buffer buf))))))

  ;; Shell
  (use-package shell
    :ensure nil
    :custom
    (comint-prompt-read-only t)
    (comint-process-echoes t))

  ;; Eshell
  (use-package eshell
    :defer t
    :custom
    (eshell-history-size 10000)
    (eshell-buffer-maximum-lines 10000)
    (eshell-hist-ignoredups t)
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-scroll-to-bottom-on-output t)
    (eshell-error-if-no-glob t)
    (eshell-save-history-on-exit t)
    (eshell-prefer-lisp-functions t)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-visual-commands '("vi" "screen" "top"  "htop" "btm" "less" "more" "lynx" "ncftp" "pine" "tin" "trn"
			      "elm" "irssi" "nmtui-connect" "nethack" "vim" "alsamixer" "nvim" "w3m"
			      "ncmpcpp" "newsbeuter" "nethack" "mutt" "fzf"))
    :hook
    (eshell-load . eat-eshell-mode)
    (eshell-load . eat-eshell-visual-command-mode))

  (use-package eshell-prompt-extras
    :hook
    (eshell-first-time-mode . pgm/eshell-init)
    :custom
    (eshell-highlight-prompt t)
    (eshell-prompt-function 'epe-theme-lambda)
    :config
    (defun pgm/eshell-init ()
  	(eshell/alias "l" "ls -hl")
  	(eshell/alias "ll" "ls -hl")
  	(eshell/alias "la" "ls -ahl")
  	(eshell/alias "gs" "git status")
  	(eshell/alias "gd" "git diff")
  	(eshell/alias "gl" "git log --oneline")
  	(eshell/alias ".." "cd ..")))

  (provide 'shell-conf)
  ;;; shell-conf.el ends here
#+end_src

* Programming

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/prog-conf.el
  ;;; prog-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:

  ;; (use-package company
  ;;   :hook
  ;;   (prog-mode . company-mode)
  ;;   :bind (:map company-mode-map
  ;; 		("TAB" . company-indent-or-complete-common)
  ;; 		([tab] . company-indent-or-complete-common)
  ;; 		:map company-active-map
  ;; 		("TAB"       . company-complete-selection)
  ;; 		([tab]       . company-complete-selection)
  ;; 		("<backtab>" . company-abort)
  ;; 		("C-g"       . company-abort)
  ;; 		("C-h"       . company-show-doc-buffer))
  ;;   :custom
  ;;   (company-idle-delay                nil)
  ;;   (company-minimum-prefix-length     1)
  ;;   (company-require-match-p           'never)
  ;;   (company-frontends                 '(company-preview-frontend company-echo-metadata-frontend))
  ;;   (company-backends                  '(company-capf))
  ;;   (company-tooltip-align-annotations t))

  (use-package corfu
    :custom
    (corfu-auto nil)
    (corfu-auto-delay 0.3)
    (corfu-auto-prefix 3)
    (corfu-preview-current t))

  (use-package corfu-candidate-overlay
    :after corfu
    :config
    ;; enable corfu-candidate-overlay mode globally
    ;; this relies on having corfu-auto set to nil
    (corfu-candidate-overlay-mode 1)
    (global-set-key (kbd "C-<tab>") 'completion-at-point))

  (use-package eglot
    :ensure nil
    :custom
    (eglot-autoshutdown t)
    (eglot-events-buffer-size 0)
    (eglot-events-buffer-config '(:size 0 :format full))
    (eglot-prefer-plaintext t)
    (jsonrpc-event-hook nil)
    (eglot-code-action-indications nil) ;; Emacs 31 -- annoying as hell
    :init
    (fset #'jsonrpc--log-event #'ignore)
    :hook
    (mhtml-mode         . eglot-ensure)
    (css-mode           . eglot-ensure)
    (ja-mode            . eglot-ensure)
    (js-ts-mode         . eglot-ensure)
    (typescript-mode    . eglot-ensure)
    (typescript-ts-mode . eglot-ensure)
    (python-mode        . eglot-ensure)
    (ruby-mode          . eglot-ensure)
    (ruby-ts-mode       . eglot-ensure)
    ;; ((mhtml-mode
    ;;   css-mode
    ;;   ;; css-ts-mode
    ;;   ;; js-ts-mode
    ;;   ;; typescript-ts-mode
    ;; 	js-mode
    ;; 	typescript-mode
    ;; 	python-mode
    ;;   java-mode)
    ;;  . eglot-ensure)
    :bind (:map
  		 eglot-mode-map
  		 ("C-c l a" . eglot-code-actions)
  		 ("C-c l o" . eglot-code-actions-organize-imports)
  		 ("C-c l r" . eglot-rename)
  		 ("C-c l f" . eglot-format))
    :config
    (add-to-list 'eglot-server-programs '((ruby-mode ruby-ts-mode) "ruby-lsp")))

  ;; (use-package lsp-mode
  ;;   :hook
  ;;   ((java-mode          . lsp)
  ;;    (java-ts-mode       . lsp)
  ;;    (bash-ts-mode       . lsp)
  ;;    (mhtml-mode         . lsp)
  ;;    (js-ts-mode         . lsp)
  ;;    (json-ts-mode       . lsp)
  ;;    (typescript-mode    . lsp)
  ;;    (typescript-ts-mode . lsp)
  ;;    (python-mode        . lsp)
  ;;    (python-ts-mode     . lsp)
  ;;    (c-mode             . lsp)
  ;;    (c-ts-mode          . lsp)
  ;;    (clojure-mode       . lsp)
  ;;    (ruby-mode          . lsp-deferred)
  ;;    (ruby-ts-mode       . lsp-deferred))
  ;;   :custom
  ;;   (lsp-keymap-prefix "C-c l")
  ;;   (lsp-enable-on-type-formatting nil)
  ;;   (lsp-enable-indentation nil)
  ;;   (lsp-completion-provider :none)
  ;;   ;; https://github.com/sqls-server/sqls?tab=readme-ov-file#installation
  ;;   ;; https://github.com/sqls-server/sqls?tab=readme-ov-file#db-configuration
  ;;   (lsp-sqls-workspace-config-path "workspace")
  ;;   (lsp-sqls-connections nil)
  ;;   (lsp-disabled-clients '(rubocop-ls solargraph sorbet-ls))
  ;;   (lsp-ruby-use-bundler t)
  ;;   :bind
  ;;   (:map lsp-mode-map
  ;; 	  ("C-c l r" . lsp-rename)))

  ;; (use-package lsp-java
  ;;   :after lsp
  ;;   :hook
  ;;   (java-mode . lsp))

  (use-package compile
    :ensure nil
    ;; :hook
    ;; (;; Not ideal, but I do not want this poluting the modeline
    ;;  (compilation-start . (lambda () (setq compilation-in-progress nil))))
    :custom
    (compilation-always-kill t)
    (compilation-scroll-output t)
    (ansi-color-for-compilation-mode t)
    :config
    (add-hook 'compilation-filter-hook #'ansi-color-compilation-filter))

  (use-package makefile-mode
    :ensure nil
    :mode "\\Makefile.*\\'"
    :defer 't
    :config
    (add-to-list 'treesit-language-source-alist '(make "https://github.com/alemuller/tree-sitter-make")))

  (unless (eq system-type 'windows-nt)
    ;; TODO: finish https://clojure-doc.org/articles/tutorials/introduction/
    (use-package cider
  	:custom
  	(nrepl-use-ssh-fallback-for-remote-hosts t))
    (use-package ejc-sql
  	;; Github: https://github.com/kostafey/ejc-sql?tab=readme-ov-file#mariadbconnection
  	;; M-x ejc-connect
  	;; M-x ejc-quit-connection -> it refreshes the connection
  	:config
  	(load (expand-file-name ".local/ejc-config.el" user-emacs-directory) 'noerror 'nomessage))
    (use-package tree-sitter
  	:config
  	(global-tree-sitter-mode 1))
    (use-package tree-sitter-langs)
    (use-package treesit-auto
  	:config
  	(global-treesit-auto-mode 1)))

  (use-package conf-mode
    :ensure nil
    :mode ("\\.env\\..*\\'" "\\.env\\'")
    :init
    (add-to-list 'auto-mode-alist '("\\.env\\'" . conf-mode)))

  (use-package sql-indent
    :hook
    (sql-mode . sqlind-minor-mode))

  (use-package typescript-mode :defer t)
  (use-package powershell :defer t)
  (use-package scss-mode :defer t)
  (use-package yaml-mode :defer t)

  ;; (use-package python-mode
  ;;   :ensure nil
  ;;   :mode "\\.py\\'"
  ;;   :defer 't
  ;;   ;; :config
  ;;   ;; TODO: python related configs
  ;;   ;; TODO: python-ts-mode crashes when open .py files
  ;;   ;; (add-to-list 'treesit-language-source-alist '(python "https://github.com/tree-sitter/tree-sitter-python" "master" "src"))
  ;;   )

  (use-package magit)

  (use-package project
    :bind
    (("C-x p C" . project-recompile)))

  (use-package smerge-mode
    :ensure nil
    :bind (:map smerge-mode-map
  		("C-c ^ u" . smerge-keep-upper)
  		("C-c ^ l" . smerge-keep-lower)
  		("C-c ^ n" . smerge-next)
  		("C-c ^ p" . smerge-previous)))

  (use-package eldoc
    :ensure nil
    :init
    (global-eldoc-mode))

  (use-package eldoc-box
    :defer t
    :custom
    (eldoc-box-border-width 1)
    (eldoc-box-echo-area-use-multiline-p t)
    (eldoc-box-scrollbar-width 8)
    (eldoc-box-max-lines 10)
    (eldoc-box-use-echo-area nil)
    :bind
    ("C-c h ." . eldoc-box-help-at-point)
    :hook
    (eldoc-mode . eldoc-box-hover-mode))

  (use-package dap-mode
    :after lsp-mode
    ;; :custom
    ;; (dap-auto-configure-features '())
    :bind (:map dap-mode-map
  		("C-c <f9>" . dap-debug)
  		("C-c <f8>" . dap-breakpoint-toggle)
  		("C-c d r"  . dap-debug-restart)
  		("<f7>"     . dap-step-in)
  		("<f10>"    . dap-step-out)
  		("<f8>"     . dap-next)
  		("<f11>"    . dap-previous)
  		("<f9>"     . dap-continue)
  		("C-c d q"  . dap-disconnect)
  		("C-c d e"  . dap-eval)
  		("C-c d v"  . dap-eval-thing-at-point)
  		("C-c d E"  . dap-eval-region))
    :config
    (dap-auto-configure-mode)
    (require 'dap-java)
    (require 'dap-lldb)
    (require 'dap-cpptools)
    (require 'dap-gdb)
    (require 'dap-gdb-lldb)

    ;; (require 'dap-cpptools)
    ;; (with-eval-after-load 'dap-mode
    ;;	(dap-register-debug-template
    ;;	 "LLDB::Run"
    ;;	 (list :type "lldb-vscode"
    ;;		   :cwd  (expand-file-name (project-root (project-current)))
    ;;		   :request "launch"
    ;;		   :program (expand-file-name "bin/win32_game.exe" (project-root (project-current)))
    ;;		   :name "LLDB::Run")))
    ;; (setq dap-lldb-debug-program '("C:/Users/douzone/.emacs.d/.extension/vscode/vadimcn.vscode-lldb/codelldb-win32-x64/extension/adapter/codelldb.exe"))
    )

  ;; (use-package evil
  ;;   :init
  ;;   (setq evil-disable-insert-state-bindings t)
  ;;   (setq evil-move-beyond-eol t)
  ;;   ;; :hook (prog-mode . evil-local-mode)
  ;;   )

  ;;; EGLOT
  ;; pip install python-lsp-server flake8
  ;; npm install -g typescript teypscript-language-server
  ;; npm install -g vscode-langservers-extracted
  ;; (use-package eglot
  ;;   :ensure nil
  ;;   :custom
  ;;   (eglot-autoshutdown t)
  ;;   (eglot-events-buffer-size 0)
  ;;   (eglot-events-buffer-config '(:size 0 :format full))
  ;;   (eglot-prefer-plaintext t)
  ;;   (jsonrpc-event-hook nil)
  ;;   (eglot-code-action-indications nil) ;; Emacs 31 -- annoying as hell
  ;;   :init
  ;;   (fset #'jsonrpc--log-event #'ignore)
  ;;   :hook
  ;;   ((mhtml-mode
  ;;     css-mode
  ;;     ;; css-ts-mode
  ;;     ;; js-ts-mode
  ;;     ;; typescript-ts-mode
  ;;	js-mode
  ;;	typescript-mode
  ;;	python-mode
  ;;     java-mode)
  ;;    . eglot-ensure)
  ;;   :bind (:map
  ;;		 eglot-mode-map
  ;;		 ("C-c l a" . eglot-code-actions)
  ;;		 ("C-c l o" . eglot-code-actions-organize-imports)
  ;;		 ("C-c l r" . eglot-rename)
  ;;		 ("C-c l f" . eglot-format)))

  ;;; EGLOT-JAVA
  ;; (use-package eglot-java
  ;;   :hook
  ;;   ((java-mode java-ts-mode)  . eglot-java-mode)
  ;;   :bind (:map
  ;;		 eglot-java-mode-map
  ;;		 ("C-c l n" . eglot-java-file-new)
  ;;		 ("C-c l x" . eglot-java-run-main)
  ;;		 ("C-c l t" . eglot-java-run-test)
  ;;		 ("C-c l N" . eglot-java-project-new)
  ;;		 ("C-c l T" . eglot-java-project-build-task)
  ;;		 ("C-c l R" . eglot-java-project-build-refresh)))

  (use-package elec-pair
    :ensure nil
    :defer
    :hook
    (after-init-hook . electric-pair-mode))

  (use-package paren
    :ensure nil
    :hook
    (after-init-hook . show-paren-mode)
    :custom
    (show-paren-delay 0)
    (show-paren-style 'mixed)
    (show-paren-context-when-offscreen t))

  (use-package inf-ruby)

  (use-package tagedit
    :hook
    ((mhtml-mode
  	sgml-mode
  	nxml-mode)
     . (lambda ()
  	   (tagedit-add-paredit-like-keybindings)
  	   (tagedit-mode 1))))

  (use-package emmet-mode
    :hook (mhtml-mode sgml-mode nxml-mode))

  (use-package flymake
    :ensure nil
    :defer t
    :hook ((prog-mode . flymake-mode)
  	   (elisp-mode . flymake-mode))
    :bind (:map flymake-mode-map
  		("M-8" . flymake-goto-next-error)
  		("M-7" . flymake-goto-prev-error)
  		("C-c ! n" . flymake-goto-next-error)
  		("C-c ! p" . flymake-goto-prev-error)
  		("C-c ! l" . flymake-show-buffer-diagnostics)
  		("C-c ! t" . toggle-flymake-diagnostics-at-eol))
    :custom
    (flymake-show-diagnostics-at-end-of-line nil)
    ;; (flymake-show-diagnostics-at-end-of-line 'short)
    (flymake-indicator-type 'margins)
    (flymake-margin-indicators-string
     `((error   "!" compilation-error) ;; Alternatives: », E, W, i, !, ?)
  	 (warning "?" compilation-warning)
  	 (note    "i" compilation-info)))
    :config
    ;; Define the toggle function
    (defun toggle-flymake-diagnostics-at-eol ()
  	"Toggle the display of Flymake diagnostics at the end of the line
  and restart Flymake to apply the changes."
  	(interactive)
  	(setq flymake-show-diagnostics-at-end-of-line
  	    (not flymake-show-diagnostics-at-end-of-line))
  	(flymake-mode -1) ;; Disable Flymake
  	(flymake-mode 1)  ;; Re-enable Flymake
  	(message "Flymake diagnostics at end of line: %s"
  	       (if flymake-show-diagnostics-at-end-of-line
  		   "Enabled" "Disabled"))))

  (use-package diff-mode
    :ensure nil
    :defer t
    :config
    (setq diff-default-read-only t)
    (setq diff-advance-after-apply-hunk t)
    (setq diff-update-on-the-fly t)
    (setq diff-font-lock-syntax 'hunk-also)
    (setq diff-font-lock-prettify nil))

  (use-package copilot
    ;; :hook (prog-mode . copilot-mode)
    :bind (:map copilot-completion-map
  		("C-c C-n"     . copilot-next-completion)
  		("C-c n"       . copilot-next-completion)
  		("C-c C-p"     . copilot-previous-completion)
  		("C-c p"       . copilot-previous-completion)
  		("C-c c f"     . copilot-accept-completion-by-word)
  		("C-c c e"     . copilot-accept-completion-by-line)
  		("C-c <SPC>"   . copilot-accept-completion)
  		("C-c c <SPC>" . copilot-accept-completion)
  		("C-c C-<SPC>" . copilot-accept-completion)
  		("C-c c t"     . copilot-toggle-auto-complete)))

  (use-package ediff
    :ensure nil
    :commands (ediff-buffers ediff-files ediff-buffers3 ediff-files3)
    :init
    (setq ediff-split-window-function 'split-window-horizontally)
    (setq ediff-window-setup-function 'ediff-setup-windows-plain)
    :config
    (setq ediff-keep-variants nil)
    (setq ediff-make-buffers-readonly-at-startup nil)
    (setq ediff-merge-revisions-with-ancestor t)
    (setq ediff-show-clashes-only t))

  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode))

  ;; (use-package smart-hungry-delete
  ;;   :ensure t
  ;;   :bind (([remap backward-delete-char-untabify] . smart-hungry-delete-backward-char)
  ;;		 ([remap delete-backward-char] . smart-hungry-delete-backward-char)
  ;;		 ([remap delete-char] . smart-hungry-delete-forward-char))
  ;;   :init (smart-hungry-delete-add-default-hooks))

  (use-package whitespace
    :ensure nil
    :defer t
    ;; :hook (before-save . whitespace-cleanup)
    )

  (provide 'prog-conf)
  ;;; prog-conf.el ends here
#+end_src

* Miscellaneous

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/misc-conf.el
  ;;; misc-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (use-package notmuch
    :ensure t
    :config
    (setq mail-user-agent 'notmuch-user-agent))

  (setq user-full-name (getenv "USER_FULL_NAME")
  	  user-mail-address (getenv "USER_EMAIL")
  	  auth-sources '("~/.authinfo.gpg"))
  (setq send-mail-function 'sendmail-send-it
  	  message-send-mail-function 'sendmail-send-it
  	  sendmail-program (executable-find "msmtp")
  	  message-send-mail-function 'message-send-mail-with-sendmail)
  (provide 'misc-conf)
  ;;; misc-conf.el ends here
#+end_src

Some extra stuff.

#+begin_src emacs-lisp :tangle no
  (use-package ejc-sql
    :custom
    (clomacs-httpd-default-port 8888)
    :config
    (let ((ojdbc-path "~/.m2/repository/com/oracle/ojdbc8/8/ojdbc8-8.jar")
  	    (maria-path "~/.m2/repository/org/mariadb/jdbc/mariadb-java-client/2.6.2/mariadb-java-client-2.6.2.jar"))
      (ejc-create-connection
       "ERP10 20419"
       :classpath      ojdbc-path
       :connection-uri (concat "jdbc:oracle:thin:@"
			       (getenv "X20419_DB_HOST") ":"
			       (getenv "X20419_DB_PORT") ":"
			       (getenv "X20419_DB_NAME"))
       :user           (getenv "X20419_DB_USERNAME")
       :password       (getenv "X20419_DB_PASSWORD")
       :separator      "/")
      (ejc-create-connection
       "ERP10 20313"
       :classpath      maria-path
       :connection-uri "jdbc:mariadb://uri:port/dbname"
       :user           "USER_ID"
       :password       "PASSWORD"
       :separator      "/")))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package gptel
	:custom
	(gptel-default-mode 'org-mode)
	(gptel-backend (gptel-make-gemini "Gemini" :key "Gemini_API_Key" :stream t)))
#+end_src

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/package-setup-function.el
  ;;; package-setup-function.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun setup-eat ()
    "Setup `eat'."
    (use-package eat))

  (defun setup-dumb-jump ()
    "Setup `dumb-jump'."
    (interactive)
    (use-package dumb-jump))

  (defun set-up-restclient ()
    "Usage:
  :header = <<
  Content-Type: application/json
  X-Authenticate-Token: :token
  #

  GET http://localhost:8080/api/list
  :header
  #

  POST http://localhost:8080/api/login
  Content-Type: application/x-www-form-urlencoded
  -> jq-set-var :token .data.access_token

  userid=userid&password=1111
  #

  for more details
  https://github.com/pashky/restclient.el/"
    (interactive)
    (use-package restclient)
    (use-package restclient-jq))

  (defun restclient-scratch-buffer()
    "Make `restclient-mode' buffer."
    (interactive)
    (switch-to-buffer (get-buffer-create "*scratch-restclient*"))
    (restclient-mode))

  (defun setup-request ()
    "Setup `request'."
    (interactive)
    (use-package request))

  ;; (request "http://localhost:8080/api/CM/AccountService/login"
  ;;   :type "POST"
  ;;   ;; :headers '(("Content-Type" . "application/x-www-form-urlencoded"))
  ;;   :data '(("userid" . "userid") ("password" . "password"))
  ;;   :parser 'json-read
  ;;   :success (cl-function
  ;;             (lambda (&key data &allow-other-keys)
  ;;               (setq token (assoc-default 'access_token (assoc-default 'data data))))))

  ;; (request "http://localhost:8080/api/HR/Evarpt00400_Z20313Service/listMenu"
  ;;   :headers `(("Content-Type" . "application/json")
  ;;              ("X-Authenticate-Token" . ,token))
  ;;   :parser 'json-read
  ;;   :success (cl-function
  ;;             (lambda (&key data &allow-other-keys)
  ;;               (message "%S" (recurse-alist (assoc-default 'data data))))))

  (defun setup-geiser-guile ()
    "Setup `geiser-guile'."
    (interactive)
    (use-package geiser-guile
	:config
	(setq geiser-scheme-implementation 'guile)))

  (defun setup-pyvenv ()
    "Setup `pyvenv'."
    (interactive)
    (use-package pyvenv))

  (defun setup-emmet-mode ()
    "Setup `emmet-mode'."
    (interactive)
    (use-package emmet-mode
	:hook
	(mhtml-mode . emmet-mode)))

  (use-package denote
    :custom
    (denote-sort-keywords t)
    (denote-directory (expand-file-name "~/Documents/notes/denote/"))
    (denote-prompts '(file-type subdirectory title keywords))
    :hook
    (dired-mode . denote-dired-mode))

  (provide 'package-setup-function)
  ;;; package-setup-function.el ends here
#+end_src

* Linux

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/linux-conf.el
  ;;; linux-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun m180/font-set ()
    "Font settings for linux."
    (set-face-attribute 'default nil :family "Iosevka Nerd Font Mono" :height 120 :weight 'light)
    (set-fontset-font t 'hangul (font-spec :name "NotoSansKR")))

  (if (daemonp)
  	(add-hook 'server-after-make-frame-hook #'m180/font-set)
    (m180/font-set))

  (provide 'linux-conf)
  ;;; linux-conf.el ends here
#+end_src

* MacOS

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/macos-conf.el
  ;;; macos-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun m180/font-set ()
    "Font settings for MacOS."
    (set-face-attribute 'default nil :family "Iosevka Nerd Font Mono" :height 160 :weight 'extra-light)
    (set-fontset-font t 'hangul (font-spec :name "NotoSansKR")))

  (if (daemonp)
  	(add-hook 'server-after-make-frame-hook #'m180/font-set)
    (m180/font-set))

  (setq insert-directory-program "gls")
  (setq mac-command-modifier 'meta)

  (when (executable-find "zsh")
    (setenv "SHELL" (executable-find "zsh")))

  (provide 'macos-conf)
  ;;; macos-conf.el ends here
#+end_src

* Windows

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/settings/windows-conf.el
  ;;; windows-conf.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun m180/font-set ()
    "Font set for Windows."
    (set-face-attribute 'default nil :family "Iosevka NFM" :height 120 :weight 'light)
    (set-fontset-font t 'hangul (font-spec :name "Noto Sans KR")))

  (if (daemonp)
  	(add-hook 'server-after-make-frame-hook #'m180/font-set)
    (m180/font-set))

  (setq explicit-shell-file-name (executable-find "pwsh"))
  (setq shell-file-name (expand-file-name "cmdproxy.exe" exec-directory))
  (setq org-babel-shell-command shell-file-name)
  (setq org-babel-C-complier "gcc"
  	  org-babel-C++-complier "g++")
  (setq grep-use-null-device nil)

  ;; (defun pwsh-shell-mode-setup ()
  ;; "Powershell setup for Windows."
  ;; (setq-local comint-prompt-read-only t)
  ;; (setq-local comint-process-echoes t))
  ;; (add-hook 'shell-mode-hook #'pwsh-shell-mode-setup)
  ;; (setq eshell-windows-shell-file (executable-find "pwsh"))
  ;; (setq explicit-shell-file-name (executable-find "pwsh"))
  ;; (setq shell-file-name (executable-find "pwsh"))
  ;; (setenv "SHELL" shell-file-name)

  (provide 'windows-conf)
  ;;; windows-conf.el ends here
#+end_src

* Douzone                                                                       :noexport:

** Config

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/douzone-comet-config.el
  ;;; douzone-comet-config.el --- Summary -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun switch-properties (drs)
    "Switch db.properties configs by DRS.
  `(switch-properties DRS_CODE)'
  empty string parameter comments out all the DRS configs."
    (interactive "s")
    (with-current-buffer "db.properties"
  	(goto-char (point-min))
  	(setq-local sp--curr-drs "")
  	(while (not (eobp))
  	  (let ((line (buffer-substring-no-properties (point) (line-end-position))))
	  (if (and (not (string-empty-p line)) (string= (substring line 0 2) "#="))
	      (setq sp--curr-drs (substring line 2))
	    (if (and (not (string-empty-p line)) (not (string-empty-p sp--curr-drs)))
		(if (and (not (string-empty-p drs)) (string= drs sp--curr-drs))
		    (uncomment-region (line-beginning-position) (line-end-position))
		  (unless (string= "#" (substring line 0 1))
		    (comment-region (line-beginning-position) (line-end-position))))))
	  (forward-line 1)))
  	(save-buffer)))

  (provide 'douzone-comet-config)
  ;;; douzone-comet-config.el ends here
#+end_src

** Service

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/douzone-comet-service.el
  ;;; douzone-comet-service.el -- Summary -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun fu/dz--model-text->field ()
    "Open line separate list to douzone model field."
    (interactive)
    (while (not (eobp))
      (let ((field (buffer-substring-no-properties (point-at-bol) (point-at-eol))))
	(delete-region (point-at-bol) (point-at-eol))
	(beginning-of-line)
	(insert (format "@SerializedName(\"%s\")\n" field))
	(insert (format "@DzModelField(name = \"%s\", desc = \"\", colName = \"%s\")\n" field field))
	(insert (format "private String %s;\n" (downcase field)))
	(forward-line 1))))

  (defun fu/find-fat-jar ()
    "Find the fat JAR file inside target directory."
    (let* ((dir        (cond ((project-current) (project-root (project-current)))
			     ((buffer-file-name) (file-name-directory (buffer-file-name)))
			     (t default-directory)))
	   (target-dir (expand-file-name "target" dir))
	   (files      (if (file-exists-p target-dir)
			   (directory-files target-dir t "\\.jar$"))))
      (car (sort files #'string>))))

  (defun fu/spring-boot:run-jar ()
    "Test."
    (interactive)
    (let ((jar  (fu/find-fat-jar))
	  (java (expand-file-name "bin/java" (getenv "JAVA8_HOME"))))
  	(if jar (progn
		(message "Running: java -jar %s" jar)
		(async-shell-command (format "%s -jar %s" java jar) "*spring-boot*")
		(display-buffer "*spring-boot*")))))

  (provide 'douzone-comet-service)
  ;;; douzone-comet-service.el ends here
#+end_src

** UI

#+begin_src emacs-lisp :tangle ~/.emacs.d/elisp/douzone-comet-ui.el
  ;;; douzone-comet-ui.el --- Summary  -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;; Code:
  (defun fu/dz--copy-to-dews-web (module)
    "Copy file to dews-web repository.
  `TYPE' = html / css / js,
  `MODULE' = CX / CZ / HR."
    (let* ((base-path   (expand-file-name "Projects/douzone-comet-webapp-boot/dews-web/repository/view" (getenv "HOME")))
	   (src-file    (f-filename (buffer-file-name)))
	   (src         (buffer-file-name))
	   (dest-type   (expand-file-name (file-name-extension (if src-file src-file "")) base-path))
	   (dest-module (expand-file-name module dest-type))
	   (dest        (expand-file-name src-file dest-module)))
  	(message "src: %s, dest: %s" src dest)
  	(copy-file src dest t)))

  (defun fu/dz--copy-to-cx ()
    "Copy file to CX directory."
    (interactive)
    (fu/dz--copy-to-dews-web "CX"))

  (defun fu/dz--copy-to-cz ()
    "Copy file to CZ directory."
    (interactive)
    (fu/dz--copy-to-dews-web "CZ"))

  (defun fu/dz--copy-to-hr ()
    "Copy file to HR directory."
    (interactive)
    (fu/dz--copy-to-dews-web "HR"))

  (provide 'douzone-comet-ui)
  ;;; douzone-comet-ui.el ends here
#+end_src

* Local File Variables                                                          :noexport:

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
